"""
Utilidades compartidas para toda la aplicaci√≥n Ballers.
Funciones reutilizables que no dependen de UI espec√≠fica.
"""
import hashlib
import datetime as dt
from typing import Optional
from config import TIMEZONE, UTC_OFFSET_HOURS

def hash_password(password: str) -> str:
    """
    Convierte una contrase√±a en un hash SHA-256.
    
    Args:
        password: Contrase√±a en texto plano
        
    Returns:
        str: Hash SHA-256 de la contrase√±a
    """
    return hashlib.sha256(password.encode()).hexdigest()


def format_time_local(dt_obj: Optional[dt.datetime]) -> str:
    """
    Devuelve la hora local (seg√∫n TIMEZONE) en formato 'HH:MM'.
    Acepta datetime naive o con tzinfo; None ‚Üí "None".
    """
    if dt_obj is None:
        return "None"
    if dt_obj.tzinfo is None:
        dt_obj = dt_obj.replace(tzinfo=dt.timezone.utc)
    return dt_obj.astimezone(TIMEZONE).strftime("%H:%M")

def to_calendar_str(dt_obj: dt.datetime) -> str:
    """
    Convierte cualquier datetime a string para FullCalendar.
    üîß FIX: Ignora timezone UTC de PostgreSQL y trata como hora local.
    """
    if dt_obj is None:
        return ""
    
    # üîß FIX: Si viene con UTC de PostgreSQL, IGNORAR timezone y tratar como local
    if dt_obj.tzinfo == dt.timezone.utc:
        # PostgreSQL guard√≥ la hora local como UTC
        # Simplemente quitar el timezone y usar la hora tal como est√°
        local_dt = dt_obj.replace(tzinfo=None)
        return local_dt.strftime("%Y-%m-%dT%H:%M:%S")
    
    # Si es naive, asumir que ya est√° en hora local correcta
    elif dt_obj.tzinfo is None:
        return dt_obj.strftime("%Y-%m-%dT%H:%M:%S")
    
    # Si tiene otro timezone, convertir a local
    else:
        local_dt = dt_obj.astimezone(TIMEZONE).replace(tzinfo=None)
        return local_dt.strftime("%Y-%m-%dT%H:%M:%S")


def normalize_datetime_for_hash(dt_obj) -> str:
    """
    Normaliza un datetime para hashing:
    1) lo interpreta en TIMEZONE si es naive,
    2) lo convierte a UTC,
    3) elimina tzinfo y microsegundos.
    """
    if dt_obj is None:
        return ""
    if isinstance(dt_obj, str):
        dt_obj = dt.datetime.fromisoformat(dt_obj.replace("Z", "+00:00"))
    if dt_obj.tzinfo is None:
        dt_obj = dt_obj.replace(tzinfo=TIMEZONE)
    utc_naive = dt_obj.astimezone(dt.timezone.utc).replace(tzinfo=None, microsecond=0)
    return utc_naive.isoformat()

def app_health_check() -> dict:
    """
    Verifica el estado de salud de la aplicaci√≥n.
    √ötil para deployment y debugging.
    """
    import os
    
    health = {
        "status": "healthy",
        "timestamp": dt.datetime.now().isoformat(),
        "checks": {}
    }
    
    # Verificar archivos cr√≠ticos
    critical_files = [
        "data/ballers_app.db",
        "data/google_service_account.json",
        ".env"
    ]
    
    for file_path in critical_files:
        exists = os.path.exists(file_path)
        health["checks"][file_path] = "‚úÖ" if exists else "‚ùå"
        if not exists:
            health["status"] = "warning"
    
    # Verificar variables de entorno
    required_env_vars = [
        "CALENDAR_ID",
        "ACCOUNTING_SHEET_ID",
        "GOOGLE_SA_PATH"
    ]
    
    for var in required_env_vars:
        value = os.getenv(var)
        health["checks"][f"ENV_{var}"] = "‚úÖ" if value else "‚ùå"
        if not value:
            health["status"] = "warning"
    
    # Verificar conexi√≥n a base de datos
    try:
        from controllers.db import get_db_session
        db = get_db_session()
        db.close()
        health["checks"]["database_connection"] = "‚úÖ"
    except Exception as e:
        health["checks"]["database_connection"] = f"‚ùå {str(e)}"
        health["status"] = "error"
    
    return health